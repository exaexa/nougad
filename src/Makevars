CUDA_HOME = /usr/local/cuda
R_HOME = /apps/R-3.2.0
CXX = /usr/bin/g++

# This defines what the shared object libraries will be
PKG_LIBS= -L/usr/local/cuda/lib64 -Wl,-rpath,/usr/local/cuda/lib64 -lcudart -d


#########################################

CPP=g++
STD=-std=c++17
CFLAGS=-Wall -O3 $(STD) -DNDEBUG
NVCCFLAGS=-ccbin $(CPP) $(STD) -arch=sm_52
INCLUDE=/usr/local/cuda/include ./headers ./bpplib/include
LDFLAGS=
LIBS=
LIBDIRS=/usr/local/cuda/lib64
HEADERS=$(shell find . -name '*.hpp') $(shell find . -name '*.h') $(shell find . -name '*.cuh')
OBJS=$(patsubst %.cpp,%.obj,$(shell find . -name '*.cpp')) $(patsubst %.cc,%.o,$(shell find . -name '*.cc'))
CUOBJS=$(patsubst %.cu,%.cuobj,$(shell find . -name '*.cu'))
TARGET=nougad.so

all: $(TARGET)

# Building Targets

$(TARGET): $(HEADERS) $(CUOBJS) $(OBJS)
	@echo Linking executable "$@" ...
	@$(CPP) $(CFLAGS) $(addprefix -I,$(INCLUDE)) $(LDFLAGS) $(addprefix -L,$(LIBDIRS)) $(addprefix -l,$(LIBS)) -lcudart $(CUOBJS) $(OBJS) -o $@

%.obj: %.cpp $(HEADERS)
	@echo Compiling CPP file $< ...
	@$(CPP) $(CFLAGS) $(addprefix -I,$(INCLUDE)) -c $< -o $@

%.o: %.cc $(HEADERS)
	@echo Compiling CPP file $< ...
	@$(CPP) $(CFLAGS) $(addprefix -I,$(INCLUDE)) -c $< -o $@

%.cuobj: %.cu $(HEADERS)
	@echo Compiling kernels in $< ...
	@nvcc $(NVCCFLAGS) $(addprefix -I,$(INCLUDE)) --compile -cudart static $< -o $@
