CUDA_HOME=/usr/local/cuda

CPP=g++
NVCC=$(CUDA_HOME)/bin/nvcc

# for CUDA
CXXSTD=$(CPP) -std=c++17
# for R and C++
CXX=$(CPP)
CXX_STD=CXX17

PKG_LIBS= -L$(CUDA_HOME)/lib64 -Wl,-rpath,$(CUDA_HOME)/lib64 -lcudart

PKG_CPPFLAGS= -Wall -O3  -DNDEBUG -fPIC
NVCCFLAGS=-ccbin $(CXXSTD) -arch=sm_60 -Xcompiler "-fPIC"

INCLUDE=$(CUDA_HOME)/include /usr/share/R/include ./headers ./bpplib/include ./kernels
OBJS=$(patsubst %.cpp,%.obj,$(shell find . -name '*.cpp')) $(patsubst %.cc,%.o,$(shell find . -name '*.cc'))
CUOBJS=$(patsubst %.cu,%.cuobj,$(shell find . -name '*.cu'))

OBJECTS = $(OBJS) $(CUOBJS)

all : nougad.so

nougad.so: $(OBJECTS)

%.obj: %.cpp 
	$(CXX) $(PKG_CPPFLAGS) $(addprefix -I,$(INCLUDE)) -c $< -o $@

%.cuobj: %.cu 
	$(NVCC) $(NVCCFLAGS) $(addprefix -I,$(INCLUDE)) --compile -cudart static $< -o $@
